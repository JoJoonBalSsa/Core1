CompilationUnit
│   Import(path=java.text.DecimalFormat, static=False, wildcard=False)
│   PackageDeclaration(name=christmas)
└── ClassDeclaration(name=EventView, modifiers={'public'})
└── ├── MethodDeclaration(name=firstScreen, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="안녕하세요! 우테코 식당 12월 이벤트 플래너입니다.")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="12월 중 식당 예상 방문 날짜는 언제인가요? (숫자만 입력해 주세요!)")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=tryAgainMessage, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="다시 입력하세요.")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=orgerGuideMessage, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="주문하실 메뉴를 메뉴와 개수를 알려 주세요. (e.g. 해산물파스타-2,레드와인-1,초코케이크-1)")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printOrderedMenu, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="12월 "), operandr=MethodInvocation(arguments=[], member=getDate, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="일에 우테코 식당에서 받을 이벤트 혜택 미리 보기!\n"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="<주문 메뉴>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=" "), operator=+), operandr=MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="개"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=getOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=menu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))), label=None)
└── ├── MethodDeclaration(name=printOrderPrice, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="\n<할인 전 총주문 금액>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   LocalVariableDeclaration(type=DecimalFormat, name=df, initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)))
└── ├── │   LocalVariableDeclaration(type=String, name=money, initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOrderPrice, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printShampaignEvent, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="\n<증정 메뉴>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   IfStatement(condition=MemberReference(member=isShampaignEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="샴페인 1개")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="없음")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printDiscounts, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="\n<혜택 내역>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MemberReference(member=discounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=printChristmasDiscounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=printWeekdaysDiscounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=printSpecialDiscounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=printGoodsDiscounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="없음")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printChristmasDiscounts, modifiers={'private', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)), name=df)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DecimalFormat, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None), name=money)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="크리스마스 디데이 할인: -"), operandr=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]))
└── ├── MethodDeclaration(name=printWeekdaysDiscounts, modifiers={'private', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getWeekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)), name=df)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DecimalFormat, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getWeekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None), name=money)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[], member=getIsWeekEnds, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="주말 할인: -"), operandr=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)])), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="평일 할인: -"), operandr=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]))
└── ├── MethodDeclaration(name=printSpecialDiscounts, modifiers={'private', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getSpecialDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)), name=df)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DecimalFormat, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getSpecialDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None), name=money)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="특별 할인: -"), operandr=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]))
└── ├── MethodDeclaration(name=printGoodsDiscounts, modifiers={'private', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getGoodsDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)), name=df)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DecimalFormat, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getGoodsDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None), name=money)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="증정 이벤트: -"), operandr=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]))
└── ├── MethodDeclaration(name=printTotalDiscounts, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="\n<총혜택 금액>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   LocalVariableDeclaration(type=DecimalFormat, name=df, initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)))
└── ├── │   LocalVariableDeclaration(type=String, name=money, initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getDiscounts, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None))
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getDiscounts, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="-")], member=print, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printFinalFee, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="\n<할인 후 예상 결제 금액>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   LocalVariableDeclaration(type=DecimalFormat, name=df, initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="###,###")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DecimalFormat, sub_type=None)))
└── ├── │   LocalVariableDeclaration(type=String, name=money, initializer=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getOrderPrice, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[], member=getDiscounts, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operator=-), operandr=MethodInvocation(arguments=[], member=getGoodsDiscount, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), operator=+)], member=format, postfix_operators=[], prefix_operators=[], qualifier=df, selectors=[], type_arguments=None))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=money, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="원"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printBadge, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="\n<12월 이벤트 배지>")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=badge, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
