CompilationUnit
│   Import(path=java.lang.Integer.parseInt, static=True, wildcard=False)
│   Import(path=java.util.ArrayList, static=False, wildcard=False)
│   PackageDeclaration(name=christmas)
└── ClassDeclaration(name=EventModel, modifiers={'public'})
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=date)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=[], dimensions=None, name=ArrayList, sub_type=None)), name=orderedMenu)], documentation=None, modifiers={'private', 'static'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))], dimensions=[], name=ArrayList, sub_type=None))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=20), name=leftMenus)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=orderPrice)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1000), name=christmasDiscount)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=weekDaysDiscount)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=specialDiscount)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=goodsDiscount)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), name=isWeekEnds)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=boolean))
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=discounts)], documentation=None, modifiers={'private', 'static'}, type=BasicType(dimensions=[], name=int))
└── ├── MethodDeclaration(name=setOrderedMenu, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=orderedMenu, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=parseInt, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)), label=None)
└── ├── MethodDeclaration(name=getLeftMenus, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=setDate, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=getDate, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=setOrderPrice, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=orderPrice, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=getOrderPrice, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=orderPrice, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=setChristmasDiscount, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=christmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=getChristmasDiscount, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=christmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=setWeekDaysDiscount, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=weekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=getWeekDaysDiscount, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=weekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=setIsWeekEnds, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=isWeekEnds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=bool, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=setSpecialDiscount, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=specialDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=getSpecialDiscount, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=specialDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=getGoodsDiscount, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=goodsDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=getIsWeekEnds, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=isWeekEnds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=setDiscounts, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=discounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)
└── ├── MethodDeclaration(name=getDiscounts, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=discounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=eraseOrderedMenu, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[], member=clear, postfix_operators=[], prefix_operators=[], qualifier=orderedMenu, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=Assignment(expressionl=MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=20)), label=None)
└── ├── MethodDeclaration(name=getOrderedMenu, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MemberReference(member=orderedMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))
└── ├── MethodDeclaration(name=isShampaignEvent, modifiers={'public', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orderPrice, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=120000), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=printShampaignEvent, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=goodsDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25000)), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)]))
└── ├── │   ReturnStatement(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))
└── ├── MethodDeclaration(name=calculateOrderPrice, modifiers={'public', 'static'})
└── ├── │   ForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=orderPrice, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=+=, value=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=containingEnum, postfix_operators=[], prefix_operators=[], qualifier=EventEnumMenus, selectors=[MethodInvocation(arguments=[], member=getPrice, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=parseInt, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=*)), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=menus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=menu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))), label=None)
