CompilationUnit
│   Import(path=java.lang.Integer.parseInt, static=True, wildcard=False)
│   Import(path=java.util.ArrayList, static=False, wildcard=False)
│   PackageDeclaration(name=christmas)
└── ClassDeclaration(name=EventCalculateDiscounts, modifiers={'public'})
└── ├── ConstructorDeclaration(name=EventCalculateDiscounts)
└── ├── │   IfStatement(condition=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOrderPrice, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=checkEventAvailable, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=calculateChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=isWeekEndsDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=calculateSpecialDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getGoodsDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[], member=getWeekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=+), operandr=MethodInvocation(arguments=[], member=getChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=+), operandr=MethodInvocation(arguments=[], member=getSpecialDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=+)], member=setDiscounts, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=checkEventAvailable, modifiers={'public', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MemberReference(member=price, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10000), operator=>=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=setChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── │   ReturnStatement(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))
└── ├── MethodDeclaration(name=calculateChristmasDiscount, modifiers={'public', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25), operator=<=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[], member=getChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=100), operator=*), operator=+)], member=setChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=setChristmasDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=isWeekEndsDiscount, modifiers={'public', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator===), operandr=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator===), operator=||), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=MAIN, postfix_operators=[], prefix_operators=[], qualifier=EventEnumCategories, selectors=[]), MemberReference(member=menus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=calculateWeekDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setIsWeekEnds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)]))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=DESSERT, postfix_operators=[], prefix_operators=[], qualifier=EventEnumCategories, selectors=[]), MemberReference(member=menus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=calculateWeekDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=calculateWeekDiscount, modifiers={'public', 'static'})
└── ├── │   ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[], member=getMenus, postfix_operators=[], prefix_operators=[], qualifier=category, selectors=[MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=containingEnum, postfix_operators=[], prefix_operators=[], qualifier=EventEnumMenus, selectors=[], type_arguments=None)], member=contains, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[], member=getWeekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2023), operandr=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=parseInt, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=*), operator=+)], member=setWeekDaysDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=menus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=menu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))), label=None)
└── ├── MethodDeclaration(name=calculateSpecialDiscount, modifiers={'public', 'static'})
└── ├── │   IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator===), operandr=BinaryOperation(operandl=MemberReference(member=date, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25), operator===), operator=||), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[], member=getSpecialDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1000), operator=+)], member=setSpecialDiscount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))
