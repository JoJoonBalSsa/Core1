CompilationUnit
│   PackageDeclaration(name=christmas)
└── EnumDeclaration(annotations=[], body=EnumBody(constants=[EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="양송이수프"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6000)], body=None, documentation=None, modifiers=None, name=SOUP), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="타파스"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5500)], body=None, documentation=None, modifiers=None, name=TAPAS), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="시저샐러드"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8000)], body=None, documentation=None, modifiers=None, name=SALAD), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="티본스테이크"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=55000)], body=None, documentation=None, modifiers=None, name=STAKE), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="바비큐립"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=54000)], body=None, documentation=None, modifiers=None, name=RIB), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="해산물파스타"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=35000)], body=None, documentation=None, modifiers=None, name=SEAPASTA), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="크리스마스파스타"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25000)], body=None, documentation=None, modifiers=None, name=CHIRSTPASTA), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="초코케이크"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=15000)], body=None, documentation=None, modifiers=None, name=CAKE), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="아이스크림"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5000)], body=None, documentation=None, modifiers=None, name=ICECREAM), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="제로콜라"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3000)], body=None, documentation=None, modifiers=None, name=COKE), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="레드와인"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60000)], body=None, documentation=None, modifiers=None, name=WINE), EnumConstantDeclaration(annotations=[], arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="샴페인"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=25000)], body=None, documentation=None, modifiers=None, name=SHAMPAIGN)], declarations=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=name)], documentation=None, modifiers={'private', 'final'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=price)], documentation=None, modifiers={'private', 'final'}, type=BasicType(dimensions=[], name=int)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=name, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=name, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=price, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=price, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers=set(), name=EventEnumMenus, parameters=[FormalParameter(annotations=[], modifiers=set(), name=name, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=price, type=BasicType(dimensions=[], name=int), varargs=False)], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=name, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getName, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MemberReference(member=price, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getPrice, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[], member=getName, postfix_operators=[], prefix_operators=[], qualifier=eventEnumMenus, selectors=[MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=eventEnumMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)]))]), control=EnhancedForControl(iterable=MethodInvocation(arguments=[], member=values, postfix_operators=[], prefix_operators=[], qualifier=EventEnumMenus, selectors=[], type_arguments=None), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=eventEnumMenus)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=EventEnumMenus, sub_type=None))), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), label=None)], documentation=None, modifiers={'public', 'static'}, name=containingEnum, parameters=[FormalParameter(annotations=[], modifiers=set(), name=menu, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=EventEnumMenus, sub_type=None), throws=None, type_parameters=None)]), documentation=None, implements=None, modifiers=set(), name=EventEnumMenus)
