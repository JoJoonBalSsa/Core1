[
    {
        "sensitivity": 3,
        "tainted": [
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControl.java",
                "method_name": "EventControl.ClientExample.println",
                "tree_position": "23-39",
                "cut_tree": "Method: ClientExample()\nBody:\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"localhost\"), name=serverAddress)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=12345), name=port)], modifiers=set(), type=BasicType(dimensions=[], name=int))\nTryStatement(block=[WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=nextLine, postfix_operators=[], prefix_operators=[], qualifier=inputStream, selectors=[], type_arguments=None), name=response)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uba54\uc2dc\uc9c0: \"), operandr=MemberReference(member=response, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=hasNextLine, postfix_operators=[], prefix_operators=[], qualifier=inputStream, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\ub294 \ub3d9\uc548 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4: \"), operandr=MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.err, selectors=[], type_arguments=None), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['IOException']))], finally_block=None, label=None, resources=[TryResource(annotations=[], modifiers=set(), name=clientSocket, type=ReferenceType(arguments=None, dimensions=[], name=Socket, sub_type=None), value=ClassCreator(arguments=[MemberReference(member=serverAddress, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=port, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Socket, sub_type=None))), TryResource(annotations=[], modifiers=set(), name=inputStream, type=ReferenceType(arguments=None, dimensions=[], name=Scanner, sub_type=None), value=ClassCreator(arguments=[ClassCreator(arguments=[MethodInvocation(arguments=[], member=getInputStream, postfix_operators=[], prefix_operators=[], qualifier=clientSocket, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=InputStreamReader, sub_type=None))], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Scanner, sub_type=None)))])",
                "source_code": "    public void ClientExample() {        String serverAddress = \"localhost\"; // \uc11c\ubc84 \uc8fc\uc18c        int port = 12345; // \uc11c\ubc84 \ud3ec\ud2b8        try (Socket clientSocket = new Socket(serverAddress, port);                Scanner inputStream = new Scanner(new InputStreamReader(clientSocket.getInputStream()))) {            // \uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825            while (inputStream.hasNextLine()) {                String response = inputStream.nextLine();                System.out.println(\"\uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uba54\uc2dc\uc9c0: \" + response);            }        } catch (IOException e) {            System.err.println(\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\ub294 \ub3d9\uc548 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4: \" + e.getMessage());        }            }"
            }
        ]
    },
    {
        "sensitivity": 2,
        "tainted": [
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControl.java",
                "method_name": "EventControl.ClientExample.println",
                "tree_position": "23-39",
                "cut_tree": "Method: ClientExample()\nBody:\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"localhost\"), name=serverAddress)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=12345), name=port)], modifiers=set(), type=BasicType(dimensions=[], name=int))\nTryStatement(block=[WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=nextLine, postfix_operators=[], prefix_operators=[], qualifier=inputStream, selectors=[], type_arguments=None), name=response)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uba54\uc2dc\uc9c0: \"), operandr=MemberReference(member=response, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=hasNextLine, postfix_operators=[], prefix_operators=[], qualifier=inputStream, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\ub294 \ub3d9\uc548 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4: \"), operandr=MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.err, selectors=[], type_arguments=None), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['IOException']))], finally_block=None, label=None, resources=[TryResource(annotations=[], modifiers=set(), name=clientSocket, type=ReferenceType(arguments=None, dimensions=[], name=Socket, sub_type=None), value=ClassCreator(arguments=[MemberReference(member=serverAddress, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=port, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Socket, sub_type=None))), TryResource(annotations=[], modifiers=set(), name=inputStream, type=ReferenceType(arguments=None, dimensions=[], name=Scanner, sub_type=None), value=ClassCreator(arguments=[ClassCreator(arguments=[MethodInvocation(arguments=[], member=getInputStream, postfix_operators=[], prefix_operators=[], qualifier=clientSocket, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=InputStreamReader, sub_type=None))], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Scanner, sub_type=None)))])",
                "source_code": "    public void ClientExample() {        String serverAddress = \"localhost\"; // \uc11c\ubc84 \uc8fc\uc18c        int port = 12345; // \uc11c\ubc84 \ud3ec\ud2b8        try (Socket clientSocket = new Socket(serverAddress, port);                Scanner inputStream = new Scanner(new InputStreamReader(clientSocket.getInputStream()))) {            // \uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825            while (inputStream.hasNextLine()) {                String response = inputStream.nextLine();                System.out.println(\"\uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uba54\uc2dc\uc9c0: \" + response);            }        } catch (IOException e) {            System.err.println(\"\uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\ub294 \ub3d9\uc548 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4: \" + e.getMessage());        }            }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControl.java",
                "method_name": "EventControl.inputMenu.readLine",
                "tree_position": "65-76",
                "cut_tree": "Method: inputMenu()\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[], member=orgerGuideMessage, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None)\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=Console, selectors=[], type_arguments=None), name=menu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))\nWhileStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=eraseOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=tryAgainMessage, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=readLine, postfix_operators=[], prefix_operators=[], qualifier=Console, selectors=[], type_arguments=None)), label=None)]), condition=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=catchMenuError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[], member=printOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventView, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public void inputMenu() {        EventView.orgerGuideMessage();        String menu = Console.readLine();        while (catchMenuError(menu)) {            EventModel.eraseOrderedMenu();            EventView.tryAgainMessage();            menu = Console.readLine();        }        EventView.printOrderedMenu();    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControl.java",
                "method_name": "EventControl.catchMenuError",
                "tree_position": "78-85",
                "cut_tree": "Method: catchMenuError(String menu)\nBody:\nTryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkMenuError, postfix_operators=[], prefix_operators=[], qualifier=EventControlError, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)], catches=[CatchClause(block=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['IllegalArgumentException']))], finally_block=None, label=None, resources=None)",
                "source_code": "    private boolean catchMenuError(String menu) {        try {            EventControlError.checkMenuError(menu);            return false;        } catch (IllegalArgumentException e) {            return true;        }    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControlError.java",
                "method_name": "EventControlError.checkMenuError",
                "tree_position": "27-36",
                "cut_tree": "Method: checkMenuError(String menu)\nBody:\nIfStatement(condition=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isOneMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkOneMenuErrors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=onlyDrinksError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=None, label=None)]))\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkManyMenuErrors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public static void checkMenuError(String menu) {                if (isOneMenu(menu)) {            checkOneMenuErrors(menu);            onlyDrinksError(EventModel.getOrderedMenu());            return;        }        checkManyMenuErrors(menu);            }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControlError.java",
                "method_name": "EventControlError.checkManyMenuErrors",
                "tree_position": "58-64",
                "cut_tree": "Method: checkManyMenuErrors(String menu)\nBody:\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\",\")], member=split, postfix_operators=[], prefix_operators=[], qualifier=menu, selectors=[], type_arguments=None), name=menus)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))\nForStatement(body=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=oneMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkOneMenuErrors, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]), control=EnhancedForControl(iterable=MemberReference(member=menus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=oneMenu)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None)], member=onlyDrinksError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)",
                "source_code": "    private static void checkManyMenuErrors(String menu) {        String[] menus = menu.split(\",\");        for (String oneMenu : menus) {            checkOneMenuErrors(oneMenu);        }        onlyDrinksError(EventModel.getOrderedMenu());    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventControlError.java",
                "method_name": "EventControlError.checkOneMenuErrors",
                "tree_position": "47-56",
                "cut_tree": "Method: checkOneMenuErrors(String oneMenu)\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=oneMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=checkMenuFormError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nLocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"-\")], member=split, postfix_operators=[], prefix_operators=[], qualifier=oneMenu, selectors=[], type_arguments=None), name=menuInfo)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[None], name=String, sub_type=None))\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=checkMenuNameError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=checkMenuCountError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))])], member=checkMenuDuplicateError, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setOrderedMenu, postfix_operators=[], prefix_operators=[], qualifier=EventModel, selectors=[], type_arguments=None), label=None)",
                "source_code": "    private static void checkOneMenuErrors(String oneMenu) {        checkMenuFormError(oneMenu);        String[] menuInfo = oneMenu.split(\"-\");            checkMenuNameError(menuInfo[0]);        checkMenuCountError(menuInfo[1]);        checkMenuDuplicateError(menuInfo[0]);                EventModel.setOrderedMenu(menuInfo);    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\EventModel.java",
                "method_name": "EventModel.setOrderedMenu.println",
                "tree_position": "19-25",
                "cut_tree": "Method: setOrderedMenu(String menuInfo)\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=orderedMenu, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=orderedMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setOrdZeredMenu, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)\nStatementExpression(expression=Assignment(expressionl=MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=-=, value=MethodInvocation(arguments=[MemberReference(member=menuInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))])], member=parseInt, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)), label=None)\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=leftMenus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public static void setOrderedMenu(String[] menuInfo) {        orderedMenu.add(menuInfo);        setOrdZeredMenu(orderedMenu);        //System.out.println(orderedMenu);        leftMenus -= parseInt(menuInfo[1]);        System.out.println(leftMenus);    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\SimpleTaintExample.java",
                "method_name": "MyClass.setValue",
                "tree_position": "70-73",
                "cut_tree": "Method: setValue(String input)\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=input, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setTest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public void setValue(String input)    {        setTest(input);    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\SimpleTaintExample.java",
                "method_name": "MyClass.setTest.println",
                "tree_position": "80-82",
                "cut_tree": "Method: setTest(String input2)\nBody:\nStatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=input2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)",
                "source_code": "    public void setTest(String input2){        System.out.println(input2);    }"
            },
            {
                "file_path": "\ubc15\ud558\uc740_\ud06c\ub9ac\uc2a4\ub9c8\uc2a4\\Application.java",
                "method_name": "TaintTest.main.process",
                "tree_position": "4-6",
                "cut_tree": "Method: main(String args)\nBody:\nStatementExpression(expression=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=EventControl, sub_type=None)), label=None)",
                "source_code": "    public static void main(String[] args) {        new EventControl();    }"
            }
        ]
    }
]