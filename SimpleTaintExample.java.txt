CompilationUnit
│   Import(path=java.util.Scanner, static=False, wildcard=False)
│   None
└── ClassDeclaration(name=SimpleTaintExample, modifiers={'public'})
└── ├── MethodDeclaration(name=main, modifiers={'public', 'static'})
└── ├── │   LocalVariableDeclaration(type=MyClass, name=myObject, initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=MyClass, sub_type=None)))
└── ├── │   LocalVariableDeclaration(type=Scanner, name=scanner, initializer=ClassCreator(arguments=[MemberReference(member=in, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Scanner, sub_type=None)))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="Enter tainted data: ")], member=print, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   LocalVariableDeclaration(type=String, name=userInput, initializer=MethodInvocation(arguments=[], member=nextLine, postfix_operators=[], prefix_operators=[], qualifier=scanner, selectors=[], type_arguments=None))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=userInput, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setValue, postfix_operators=[], prefix_operators=[], qualifier=myObject, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[], member=printValue, postfix_operators=[], prefix_operators=[], qualifier=myObject, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[], member=useValueInAnotherMethod, postfix_operators=[], prefix_operators=[], qualifier=myObject, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[], member=anotherPrint, postfix_operators=[], prefix_operators=[], qualifier=myObject, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[], member=close, postfix_operators=[], prefix_operators=[], qualifier=scanner, selectors=[], type_arguments=None), label=None)
└── ClassDeclaration(name=TaintTest, modifiers=set())
└── ├── MethodDeclaration(name=main, modifiers={'public', 'static'})
└── ├── │   LocalVariableDeclaration(type=Scanner, name=scanner, initializer=ClassCreator(arguments=[MemberReference(member=in, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Scanner, sub_type=None)))
└── ├── │   LocalVariableDeclaration(type=String, name=input27, initializer=MethodInvocation(arguments=[], member=nextLine, postfix_operators=[], prefix_operators=[], qualifier=scanner, selectors=[], type_arguments=None))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=input27, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=process, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=process, modifiers={'public', 'static'})
└── ├── │   LocalVariableDeclaration(type=String, name=sanitizedData, initializer=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=sanitize, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=sanitizedData, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=formatData, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=formatData, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=logData, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=sanitize, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(MethodInvocation(arguments=[], member=trim, postfix_operators=[], prefix_operators=[], qualifier=data, selectors=[], type_arguments=None))
└── ├── MethodDeclaration(name=formatData, modifiers={'public', 'static'})
└── ├── │   ReturnStatement(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="Formatted: "), operandr=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+))
└── ├── MethodDeclaration(name=logData, modifiers={'public', 'static'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=formattedData, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ClassDeclaration(name=MyClass, modifiers=set())
└── ├── FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=tvalue)], documentation=None, modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))
└── ├── ConstructorDeclaration(name=MyClass)
└── ├── │   LocalVariableDeclaration(type=Scanner, name=scanner, initializer=ClassCreator(arguments=[MemberReference(member=in, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Scanner, sub_type=None)))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="값을 입력하세요: ")], member=print, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=tvalue, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MethodInvocation(arguments=[], member=nextLine, postfix_operators=[], prefix_operators=[], qualifier=scanner, selectors=[], type_arguments=None)), label=None)
└── ├── MethodDeclaration(name=setValue, modifiers={'public'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=input, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setTest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=printValue, modifiers={'public'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=tvalue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setTest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=tvalue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=setTest, modifiers={'public'})
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=input2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)
└── ├── MethodDeclaration(name=main, modifiers={'public', 'static'})
└── ├── │   LocalVariableDeclaration(type=MyClass, name=myClass, initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=MyClass, sub_type=None)))
└── ├── │   StatementExpression(expression=MethodInvocation(arguments=[], member=printValue, postfix_operators=[], prefix_operators=[], qualifier=myClass, selectors=[], type_arguments=None), label=None)
